<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>php 安装 rabbitmq 扩展</title>
    <url>/2020/11/13/rabbitmq/</url>
    <content><![CDATA[<blockquote>
<p>PHP 使用 AMQP 协议来连接 Rabbitmq， AMQP 协议即 “Advanced Message Queuing Protocol ”，高级消息队列协议。<br>使 PHP 支持 AMQP 协议，需要安装：</p>
<ul>
<li>rabbitmq 的客户端 C 类库 ：rabbitmq-c</li>
<li>PHP 官方提供的 AMQP 扩展amqp-1.6.1<br>两者的关系是，PHP 扩展依赖 rabbitmq-c 类库。</li>
</ul>
</blockquote>
<hr>
<h3 id="第一步：安装依赖-rabbitmq-c-类库"><a href="#第一步：安装依赖-rabbitmq-c-类库" class="headerlink" title="第一步：安装依赖 rabbitmq-c 类库"></a>第一步：安装依赖 rabbitmq-c 类库</h3><p>下载地址：<a href="https://github.com/alanxz/rabbitmq-c/releases">https://github.com/alanxz/rabbitmq-c/releases</a></p>
<p>我这里下载版本：<a href="https://github.com/alanxz/rabbitmq-c/releases/download/v0.8.0/rabbitmq-c-0.8.0.tar.gz">https://github.com/alanxz/rabbitmq-c/releases/download/v0.8.0/rabbitmq-c-0.8.0.tar.gz</a> （注意：0.9.0 版本开始需要使用cmake 编译：不知道为什么我的mac cmake 会出现错误 Determining if the function clock_gettime exists in the rt failed ,因此选择了0.8.0 版本！）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xzvf abbitmq-c-0.8.0.tar.gz</span><br><span class="line"><span class="built_in">cd</span> rabbitmq-c-0.8.0</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/abbitmq-c-0.8.0 </span><br><span class="line">make&amp;&amp;make install</span><br></pre></td></tr></table></figure>

<p>若出现错误：make[1]: Nothing to be done for `all-am’.<br>这句提示是说明你已经编译好了，而且没有对代码进行任何改动。若想重新编译，可以先删除以前编译产生的目标文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure>


<h3 id="第二步：安装-amqp-扩展"><a href="#第二步：安装-amqp-扩展" class="headerlink" title="第二步：安装 amqp 扩展"></a>第二步：安装 amqp 扩展</h3><p>下载地址：<a href="https://pecl.php.net/package/amqp">https://pecl.php.net/package/amqp</a> 可下载最新版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xvf amqp-1.10.2.tgz </span><br><span class="line"><span class="built_in">cd</span> amqp-1.10.2</span><br><span class="line">/usr/<span class="built_in">local</span>/php/bin/phpize  <span class="comment">#用phpize生成编译文件，注意查看你的php在哪里</span></span><br><span class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/Cellar/php@7.2/7.2.33/bin/php-config --with-amqp --with-librabbitmq-dir=/usr/<span class="built_in">local</span>/rabbitmq-c-0.8.0</span><br><span class="line">make&amp;&amp;make install</span><br></pre></td></tr></table></figure>
<p>若出现错误：’amqp_ssl_socket.h’ file not found ，可以从rabbitmq-c-0.8.0/librabbitmq 目录下找到该文件拷贝到amqp的安装目录中，重新make 就可以</p>
<h3 id="第三步：配置-php-ini"><a href="#第三步：配置-php-ini" class="headerlink" title="第三步：配置 php.ini"></a>第三步：配置 php.ini</h3><p> php.ini 添加配置 extension=amqp.so</p>
<p>安装完成</p>
]]></content>
      <categories>
        <category>php</category>
        <category>Sports</category>
        <category>Baseball</category>
      </categories>
      <tags>
        <tag>rabbitmq</tag>
        <tag>Sports</tag>
        <tag>Baseball</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 索引</title>
    <url>/2020/11/17/mysql-index/</url>
    <content><![CDATA[<h3 id="索引定义"><a href="#索引定义" class="headerlink" title="索引定义"></a>索引定义</h3><p>索引（Index）是帮助MySQL高效获取数据的数据结构，本质：索引是数据结构</p>
<h3 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h3><ul>
<li><p>（1）虽然MySQL可以在含有null的列上使用索引，但不代表null和其他数据在索引中是一样的。不建议列上允许为空，最好限制 not null ，并设置一个默认值，比如0和’’空字符串等，如果是datetime类型，可以设置成’1970-01-01 00:00:00’这样的值。对MySQL来说，null 是一个特殊的值，Conceptually, NULL means “a missing unknown value” and it is treated somewhat differently from other values。 对null做算术运算的结果都是null，count时不会包括null行，null 比空字符串需要更多的存储空间等。</p>
</li>
<li><p>（2）or语句前后没有同时使用索引。当or左右查询字段只有一个是索引，该索引失效，只有当or左右查询字段均为索引时，才会生效。</p>
</li>
<li><p>（3）数据类型出现隐式转化。如varchar不加单引号的话可能会自动转换为int型，使索引无效，产生全表扫描。</p>
</li>
<li><p>（4）一般情况下不鼓励使用like操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。</p>
</li>
<li><p>（5）MySQL只对一下操作符才使用索引：&lt;     &lt;=      =      &gt;        &gt;=  ,between,in,以及某些时候的like(不以通配符%或_开头的情形)，not in 、&lt;&gt; 、!= 等会是索引失效</p>
</li>
<li><p>（6）对索引列进行运行，或使用函数</p>
</li>
<li><p>（7）mysql 中只使用一个索引，如果where子句中已经使用索引的话，那么order by 中的列是不会使用索引的。尽量不要包含多个列的排序，如果需要则最好给这些列创建复合索引<br>对于复合索引：where 条件如果使用 ro 连接 将不会命中索引</p>
</li>
</ul>
<h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p>B-Tree 是mysql 数据库中使用最多的索引，除了archive存储引擎之外，其他的存储引擎都支持该类型索引。<br>innoDB和myisam 中的B-Tree使用的是B+Tree:每个叶子节点都包含指向下一个叶子节点的指针，方便叶子节点的遍历。除了叶子节点外其他节点仅包含键值和指针</p>
<h3 id="索引的不同实现"><a href="#索引的不同实现" class="headerlink" title="索引的不同实现"></a>索引的不同实现</h3><ul>
<li><p>MyISAM索引实现：使用B+Tree 作为索引结构，叶节点的data域保存的是指向数据行的指针。<br>  在myisam中，主索引和辅助索引的结构没有任何区别。  只是主索引的key要求唯一，而辅助索引可以重复。</p>
<pre><code>  主键索引 ：仅仅存储行指针；
  二级索引：存储的也仅仅是行指针；</code></pre>
</li>
<li><p>InnoDB索引实现：也采用B+Tree 作为索引结构<br>  1.聚集索引（主键索引）：InnoDB的主键索引是聚集索引，表数据文件本身是B+Tree组织的索引结构，叶子节点data域保存的是完整的数据行，索引的key是表的主键，因此InnoDb表文件本身就是主键索引。<br>  2.二级索引（辅助索引）：而二级索引保存的是索引列值和以及指向主键的指针。</p>
<pre><code>  主键索引 ：聚集索引存储完整的数据（整行数据）
  二级索引：存储索引列值+主键信息</code></pre>
</li>
</ul>
<p><img src="/images/img_1.png"></p>
<h3 id="索引结构分析"><a href="#索引结构分析" class="headerlink" title="索引结构分析"></a>索引结构分析</h3><h4 id="B-tree"><a href="#B-tree" class="headerlink" title="B-tree"></a>B-tree</h4><p><img src="/images/img_2.png"></p>
<h4 id="B-tree-1"><a href="#B-tree-1" class="headerlink" title="B+tree"></a>B+tree</h4><p><img src="/images/img_3.png"></p>
<p>如上两图对比：相对B-Tree而言B+Tree的不同：</p>
<ul>
<li>根节点和子节点值保存键值和指针，按键值大小顺序存放，可以加大每个节点的存储键值的数量，降低B+Tree的高度。</li>
<li>叶子节点保存了指向下一个叶子节点的指针，可以方便叶子节点的范围遍历，例如如果要查询key为从9到49的所有数据记录，当找到9后，只需顺着节点和指针顺序遍历就可以一次性访问到所有数据节点，极大提到了区间查询效率。<br>每个节点占用一个磁盘块（磁盘空间），一个节点有n个升序排序的关键字和n+1个指向子树根节点的指针（这里的n是根据创建索引的时候根据数据量的大小计算出来的，数据量太多就需要大于三层的B+Tree结构）</li>
</ul>
<p><img src="/images/img_4.png"></p>
<p>针对上图，每个节点占用一个盘块的磁盘空间，一个节点上有两个升序排序的关键字和三个指向子树根节点的指针，两个关键词划分成的三个范围域对应三个指针指向的子树的数据的范围域。以根节点为例，关键字为17和35，P1指针指向的子树的数据范围为小于17，P2指针指向的子树的数据范围为17~35，P3指针指向的子树的数据范围为大于35。</p>
<p>然后针对上图模拟下 where id=29的具体过程：（首先mysql读取数据是以块（page）为单位的）。</p>
<p>首先根据根节点找到磁盘块1，读入内存。【磁盘I/O操作第1次】</p>
<p>比较关键字29在区间（17,35），找到磁盘块1的指针P2。</p>
<p>根据P2指针找到磁盘块3，读入内存。【磁盘I/O操作第2次】</p>
<p>比较关键字29在区间（26,30），找到磁盘块3的指针P2。</p>
<p>根据P2指针找到磁盘块8，读入内存。【磁盘I/O操作第3次】</p>
<p>在磁盘块8中的关键字列表中找到关键字29。</p>
<p>分析上面过程，发现需要3次磁盘I/O操作，和3次内存查找操作。由于内存中的关键字是一个有序表结构，可以利用二分法查找提高效率</p>
<p>InnoDB存储引擎中页的大小为16KB，一般表的主键类型为INT（占用4个字节）或BIGINT（占用8个字节），指针类型也一般为4或8个字节，也就是说一个页（B+Tree中的一个节点）中大概存储16KB/(8B+8B)=1K个键值（因为是估值，为方便计算，这里的K取值为〖10〗^3）。也就是说一个深度为3的B+Tree索引可以维护10^3 * 10^3 * 10^3 = 10亿 条记录。<br>实际情况中每个节点可能不能填充满，因此在数据库中，B+Tree的高度一般都在2<del>4层。MySQL的InnoDB存储引擎在设计时是将根节点常驻内存的，也就是说查找某一键值的行记录时最多只需要1</del>3次磁盘I/O操作。</p>
<h4 id="Myisam-的索引的实现：（非聚集索引）"><a href="#Myisam-的索引的实现：（非聚集索引）" class="headerlink" title="Myisam 的索引的实现：（非聚集索引）"></a>Myisam 的索引的实现：（非聚集索引）</h4><p>使用B+Tree 作为索引实现，叶节点data存放的是数据行的指针，按照B+Treede 的搜索算法先找到data域，再根据data域的指针找到对应的数据。主索引和辅助索引在结构上没有任何区别，区别在于主索引的key要求唯一，而普通索引的key可以重复。<br><img src="/images/img_5.png"></p>
<h4 id="InnoDB的索引的实现：（聚集索引）"><a href="#InnoDB的索引的实现：（聚集索引）" class="headerlink" title="InnoDB的索引的实现：（聚集索引）"></a>InnoDB的索引的实现：（聚集索引）</h4><p>InnoDB也是使用B+Tree的索引结构，数据文件本身就是索引文件（数据文件本身就是按B+Tree组织的一个索引结构），叶节点保存了完整的数据行，索引的key是主键，所以数据文件本身就是主索引。聚集索引是数据检索的非常高效，但是辅助索引需要检索两遍索引（辅助索引叶节点data域保存的主键），先检索辅助索引获取主键，在用主键在主索引中检索出数据记录。</p>
<p><img src="/images/img_6.png"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>为什么不建议使用过长的字段来作为主键，因为所有的辅助索引都引用主索引，过长的主索引会使的辅助索引变得过大。</p>
</li>
<li><p>强烈建议使用自增字段作为主键，每次插入新的记录，记录会顺序添加到当前索引节点的后续位置，当一页写满，就会开辟新的一页，这样会形成一个紧凑的索引结构，近似顺序填满，每次插入不需要移动已有的索引，因此效率非常高，也不会增加很多开销在索引的维护上。如果使用非自增主键（如：身份证、序号等），每次插入近似随机到中间的某个位置，不得不为了是新的记录插入到合适的位置而移动已有数据，频繁的数据移动带来很多开销。因此尽量使用自增长字段作为主键。</p>
</li>
</ul>
]]></content>
  </entry>
</search>
